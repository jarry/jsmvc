  前端MVC

== 简介： ==
 本项目主要是为了探索一种合适的前端开发结构，解决前端复杂结构下代码的可读性与可维护性，通过代码重用与合理分层来达到提高开发效率与代码质量的目地。
 
  虽然前端HTML、CSS、JS本身也是一种类似MVC模型，但比较含混，且对于大型的JS开发来讲仅仅区分HTML、CSS、JS是不够的。我们还需要区分JS内部代码的分工与分层。因此，借鉴了MVC模式与是Struts框架，但JS本身并不适合完整的Struts那样严格的MVC模型，严格的MVC将无法发挥JS动态脚本语言的灵活性与小巧。所以，本项目提供的是一种类似MVC模式的轻便的、松耦合的代码分层解决方案。


== 说明： ==
  * M, 即Model。用JS class来表示，主要是界面操作与业务功能逻辑，也可以包含一部分Ajax的数据处理。

  * V，即View。这就是HTML与CSS，用来渲染页面，提供DOM结构

  * C，即Controlloer。这里的控制器并非真正的控制器，也没有核心的控制功能。更多是一个Action，提供接收数据、转发请求，调用service方法，再返回给HTML的功能。  每一个页面都对应一个Action，有时的一个功能模块也适合一个当独的Action，比如一个表格与图片展示应用等。一个页面可以只有一个Action，也可以包含多个功能的Action进来。这样基于页面的所有请求与转发都来自一个Action统一入口。


== 目录结构 == 
-jsmvc
  + example1  (实例1，一个简单的表单验证)
    + js      (js目录)
       - com  (产品或项目的公共函数库)
       - lib  (基础的类库与UI组件)

  + example2  (实例2，一个表单验证)
    - bin     (后台处理目录)
    + js      (js目录)
       - com  (产品或项目的公共函数库)
       - lib  (基础的类库与UI组件)

   + js-src
       - example1 (实例1的源码目录)
       - example1 (实例2的源码目录)
       - lib  (底层公共的类库与UI组件)
       - ui   (可选目录，也可以放到lib里)
       - com  (可选目录，基本的公共函数库，比底层类库要高，是产品特性的公共库，可以合并到各模块下的com目录下)

  - build   (编译目录，用来合并与压缩)
  - doc     (帮助说明文档)
  - backup  (备份文件)
  - download (下载文件)  



== 后记： ==
  本方案还没有做完，目前正在尝试中，现在请erik与allstar同学进行评估。
  后续合适的话，将把这种模式推进到前后端融合的项目中去。

mail: lichunping@baidu.com

